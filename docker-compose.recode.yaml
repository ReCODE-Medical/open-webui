services:
  open-webui:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
      - ./custom_start.sh:/app/backend/custom_start.sh:ro
      - ./custom_start.py:/app/backend/custom_start.py:ro
      - ./recode_knowledge:/app/backend/recode_knowledge:ro
      - ./recode_electrophysiology_system_prompt.md:/app/backend/recode_electrophysiology_system_prompt.md:ro
      - ./recode_tri_logo.jpg:/app/backend/recode_tri_logo.jpg:ro
      - ./recode_models.json:/app/backend/recode_models.json:ro
      # Reference https://github.com/rndmcnlly/brace/blob/main/compose.yaml for the following:
      # - ./logo.svg:/app/backend/logo.svg:ro # TODO: use for splash etc...; place favicon in frontend 
      # - ./prompts.json:/app/backend/prompts.json:ro  # TODO: add predefined power-prompts like `/scenario`, `/proc`, etc based on common themes.
      # - ./functions:/functions:ro  # TODO: create directory of functions
      # - ./functions.json:/app/backend/functions.json:ro # TODO: present functions in the UI
      # - mount admin config here and load it
    entrypoint: ["bash", "/app/backend/custom_start.sh"]
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      tika:
        condition: service_started
    ports:
      - 8080:8080
    environment:
      ENV: prod
      WEBUI_NAME: ReCODE Chat
      WEBUI_SECRET_KEY: 
      
      ENABLE_SIGNUP: true
      ENABLE_OAUTH_SIGNUP: false
      ENABLE_LOGIN_FORM: true
      # OPENID_PROVIDER_URL:
      # OPENID_REDIRECT_URI:
      
      DEFAULT_USER_ROLE: user
      USER_PERMISSIONS_CHAT_DELETION: false
      USER_PERMISSIONS_CHAT_EDITING: false
      USER_PERMISSIONS_CHAT_TEMPORARY: false
      ENABLE_MESSAGE_RATING: true
      ENABLE_COMMUNITY_SHARING: false
      ENABLE_OLLAMA_API: false
      ENABLE_OPENAI_API: true
      
      OPENAI_API_KEY: ${RECODE_OPENAI_API_KEY}
      AUDIO_STT_ENGINE: openai
      AUDIO_TTS_ENGINE: openai
      
      DATABASE_URL: ${RECODE_DATABASE_URI}
      DATABASE_POOL_SIZE: 10
      DATABASE_POOL_MAX_OVERFLOW: 20
      DATABASE_POOL_TIMEOUT: 30

      CONTENT_EXTRACTION_ENGINE: tika
      
      VECTOR_DB: qdrant
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      RAG_EMBEDDING_ENGINE: openai
      RAG_EMBEDDING_MODEL: text-embedding-3-large
      RAG_EMBEDDING_OPENAI_BATCH_SIZE: 2048
      
      ENABLE_MODEL_FILTER: true
      MODEL_FILTER_LIST: recode-electrophysiology
      DEFAULT_MODELS: recode-electrophysiology
      RESET_CONFIG_ON_START: true
      
      WEBSOCKET_MANAGER: redis
      WEBSOCKET_REDIS_URL: redis://redis:6379/0

    restart: unless-stopped

  # External Postgres database for all data storage and user management.
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${RECODE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${RECODE_POSTGRES_PASSWORD}
      POSTGRES_DB: recode-db
    volumes:
      - postgres-data:/var/lib/postgresql/data  # TODO: map to external dir so data is not lost and more space is available
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d recode-db"]
      interval: 1s
      timeout: 5s
      retries: 10

  # Postgres Admin Dashboard.
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${RECODE_PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${RECODE_PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "True"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "True"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres

  # Redis for caching and websocket manager.
  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    restart: always

  # Vector database.
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    volumes:
      - qdrant-data:/qdrant/storage

  # Apache Tika for extracting text from files.
  tika:
    image: apache/tika:latest-full
    container_name: apache-tika
    restart: always

volumes:
  open-webui: {}
  redis-data: {}
  postgres-data: {}
  pgadmin-data: {}
  qdrant-data: {}
